"use client"

import React, { useState } from 'react'
import Link from 'next/link'
import axios from 'axios'
import Cookies from 'universal-cookie'
import jwt from 'jwt-decode'
import { useSelector, useDispatch } from 'react-redux'
import { setUser } from '../redux/userSlice'
import { refreshToken, axiosJWT, logout } from '../auth'

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const cookies = new Cookies();

  // const refreshToken = async () => {
  //   try {
  //     const res = await axios.post("http://localhost:3333/admin/auth/refresh", { token: cookies.get("refreshToken") });

  //     console.log(res.data);

  //     const token = res.data.token;
  //     const decoded: any = jwt(token);

  //     const refreshToken = res.data.refreshToken;
  //     const decodedRefresh: any = jwt(refreshToken);

  //     cookies.set('token', token, { expires: new Date(decoded.exp * 1000) });
  //     cookies.set('refreshToken', refreshToken, { expires: new Date(decodedRefresh.exp * 1000) });

  //     return res.data;
  //   } catch (err) {
  //     console.log(err);
  //   }
  // };

  // const axiosJWT = axios.create()

  // axiosJWT.interceptors.request.use(
  //   async (config) => {
  //     // console.log("interceptor");
  //     if (cookies.get("token") === undefined) {
  //       // console.log("token expired");
  //       const data = await refreshToken();
  //       config.headers["authorization"] = "Bearer " + data.token;
  //     }
  //     return config;
  //   },
  //   (error) => {
  //     return Promise.reject(error);
  //   }
  // );

  // const user = useSelector((state: any) => state.user);

  const dispatch = useDispatch();

  const handleChangeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
  };

  const handleChangePassword = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const formData = {
      email: email,
      password: password,
    };
    try {
      const response = await axios.post(
        'http://localhost:3333/admin/auth/login',
        formData
      );

      const token = response.data.token;
      const decoded: any = jwt(token);

      const refreshToken = response.data.refreshToken;
      const decodedRefresh: any = jwt(refreshToken);

      cookies.set('token', token, { expires: new Date(decoded.exp * 1000) });
      cookies.set('refreshToken', refreshToken, { expires: new Date(decodedRefresh.exp * 1000) });

      dispatch(setUser(response.data.user))
    } catch (error) {
      console.error('Login failed:', error);
    }
  };

  const teste = async () => {
    try {
      const response = await axiosJWT.get('http://localhost:3333/admin/64fe54808c593a3fb0781c13', {
        headers: {
          Authorization: `Bearer ${cookies.get('token')}`,
        },
      });
      console.log('User:', response.data);
    } catch (error) {
      console.error('User:', error);
    }
  }

  return (
    <div className='h-screen flex items-center justify-center bg-light-gray'>
      <div className='bg-white w-96 p-8 flex items-center rounded-2xl'>
        <form onSubmit={handleSubmit} className='flex flex-col gap-12 flex-1'>
          <div className='flex justify-center'>
            <svg width="167" height="71" viewBox="0 0 167 71" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M67.944 41.252C66.264 41.252 64.752 40.964 63.408 40.388C62.064 39.788 61.008 38.948 60.24 37.868C59.472 36.788 59.088 35.528 59.088 34.088H63.48C63.576 35.168 63.996 36.056 64.74 36.752C65.508 37.448 66.576 37.796 67.944 37.796C69.36 37.796 70.464 37.46 71.256 36.788C72.048 36.092 72.444 35.204 72.444 34.124C72.444 33.284 72.192 32.6 71.688 32.072C71.208 31.544 70.596 31.136 69.852 30.848C69.132 30.56 68.124 30.248 66.828 29.912C65.196 29.48 63.864 29.048 62.832 28.616C61.824 28.16 60.96 27.464 60.24 26.528C59.52 25.592 59.16 24.344 59.16 22.784C59.16 21.344 59.52 20.084 60.24 19.004C60.96 17.924 61.968 17.096 63.264 16.52C64.56 15.944 66.06 15.656 67.764 15.656C70.188 15.656 72.168 16.268 73.704 17.492C75.264 18.692 76.128 20.348 76.296 22.46H71.76C71.688 21.548 71.256 20.768 70.464 20.12C69.672 19.472 68.628 19.148 67.332 19.148C66.156 19.148 65.196 19.448 64.452 20.048C63.708 20.648 63.336 21.512 63.336 22.64C63.336 23.408 63.564 24.044 64.02 24.548C64.5 25.028 65.1 25.412 65.82 25.7C66.54 25.988 67.524 26.3 68.772 26.636C70.428 27.092 71.772 27.548 72.804 28.004C73.86 28.46 74.748 29.168 75.468 30.128C76.212 31.064 76.584 32.324 76.584 33.908C76.584 35.18 76.236 36.38 75.54 37.508C74.868 38.636 73.872 39.548 72.552 40.244C71.256 40.916 69.72 41.252 67.944 41.252ZM91.6866 20.84C93.1986 20.84 94.5426 21.164 95.7186 21.812C96.9186 22.46 97.8546 23.42 98.5266 24.692C99.2226 25.964 99.5706 27.5 99.5706 29.3V41H95.5026V29.912C95.5026 28.136 95.0586 26.78 94.1706 25.844C93.2826 24.884 92.0706 24.404 90.5346 24.404C88.9986 24.404 87.7746 24.884 86.8626 25.844C85.9746 26.78 85.5306 28.136 85.5306 29.912V41H81.4266V14.36H85.5306V23.468C86.2266 22.628 87.1026 21.98 88.1586 21.524C89.2386 21.068 90.4146 20.84 91.6866 20.84ZM113.409 41.324C111.537 41.324 109.845 40.904 108.333 40.064C106.821 39.2 105.633 38 104.769 36.464C103.905 34.904 103.473 33.104 103.473 31.064C103.473 29.048 103.917 27.26 104.805 25.7C105.693 24.14 106.905 22.94 108.441 22.1C109.977 21.26 111.693 20.84 113.589 20.84C115.485 20.84 117.201 21.26 118.737 22.1C120.273 22.94 121.485 24.14 122.373 25.7C123.261 27.26 123.705 29.048 123.705 31.064C123.705 33.08 123.249 34.868 122.337 36.428C121.425 37.988 120.177 39.2 118.593 40.064C117.033 40.904 115.305 41.324 113.409 41.324ZM113.409 37.76C114.465 37.76 115.449 37.508 116.361 37.004C117.297 36.5 118.053 35.744 118.629 34.736C119.205 33.728 119.493 32.504 119.493 31.064C119.493 29.624 119.217 28.412 118.665 27.428C118.113 26.42 117.381 25.664 116.469 25.16C115.557 24.656 114.573 24.404 113.517 24.404C112.461 24.404 111.477 24.656 110.565 25.16C109.677 25.664 108.969 26.42 108.441 27.428C107.913 28.412 107.649 29.624 107.649 31.064C107.649 33.2 108.189 34.856 109.269 36.032C110.373 37.184 111.753 37.76 113.409 37.76ZM145.943 30.596C145.943 31.34 145.895 32.012 145.799 32.612H130.643C130.763 34.196 131.351 35.468 132.407 36.428C133.463 37.388 134.759 37.868 136.295 37.868C138.503 37.868 140.063 36.944 140.975 35.096H145.402C144.803 36.92 143.711 38.42 142.127 39.596C140.567 40.748 138.623 41.324 136.295 41.324C134.399 41.324 132.695 40.904 131.183 40.064C129.695 39.2 128.519 38 127.655 36.464C126.815 34.904 126.395 33.104 126.395 31.064C126.395 29.024 126.803 27.236 127.619 25.7C128.459 24.14 129.623 22.94 131.111 22.1C132.623 21.26 134.351 20.84 136.295 20.84C138.167 20.84 139.835 21.248 141.299 22.064C142.763 22.88 143.903 24.032 144.719 25.52C145.535 26.984 145.943 28.676 145.943 30.596ZM141.659 29.3C141.635 27.788 141.095 26.576 140.039 25.664C138.983 24.752 137.675 24.296 136.115 24.296C134.699 24.296 133.487 24.752 132.479 25.664C131.471 26.552 130.871 27.764 130.679 29.3H141.659ZM157.181 41.324C155.621 41.324 154.217 41.048 152.969 40.496C151.745 39.92 150.773 39.152 150.053 38.192C149.333 37.208 148.949 36.116 148.901 34.916H153.149C153.221 35.756 153.617 36.464 154.337 37.04C155.081 37.592 156.005 37.868 157.109 37.868C158.261 37.868 159.149 37.652 159.773 37.22C160.421 36.764 160.745 36.188 160.745 35.492C160.745 34.748 160.385 34.196 159.665 33.836C158.969 33.476 157.853 33.08 156.317 32.648C154.829 32.24 153.617 31.844 152.681 31.46C151.745 31.076 150.929 30.488 150.233 29.696C149.561 28.904 149.225 27.86 149.225 26.564C149.225 25.508 149.537 24.548 150.161 23.684C150.785 22.796 151.673 22.1 152.825 21.596C154.001 21.092 155.345 20.84 156.857 20.84C159.113 20.84 160.925 21.416 162.293 22.568C163.685 23.696 164.429 25.244 164.525 27.212H160.421C160.349 26.324 159.989 25.616 159.341 25.088C158.693 24.56 157.817 24.296 156.713 24.296C155.633 24.296 154.805 24.5 154.229 24.908C153.653 25.316 153.365 25.856 153.365 26.528C153.365 27.056 153.557 27.5 153.941 27.86C154.325 28.22 154.793 28.508 155.345 28.724C155.897 28.916 156.713 29.168 157.793 29.48C159.233 29.864 160.409 30.26 161.321 30.668C162.257 31.052 163.061 31.628 163.733 32.396C164.405 33.164 164.753 34.184 164.777 35.456C164.777 36.584 164.465 37.592 163.841 38.48C163.217 39.368 162.329 40.064 161.177 40.568C160.049 41.072 158.717 41.324 157.181 41.324Z" fill="black"/>
              <path d="M68.88 60.16H63.06L62.06 63H59.68L64.66 49.08H67.3L72.28 63H69.88L68.88 60.16ZM68.24 58.3L65.98 51.84L63.7 58.3H68.24ZM73.6853 57.44C73.6853 56.3333 73.912 55.3533 74.3653 54.5C74.832 53.6467 75.4586 52.9867 76.2453 52.52C77.0453 52.04 77.932 51.8 78.9053 51.8C79.6253 51.8 80.332 51.96 81.0253 52.28C81.732 52.5867 82.292 53 82.7053 53.52V48.2H85.0053V63H82.7053V61.34C82.332 61.8733 81.812 62.3133 81.1453 62.66C80.492 63.0067 79.7386 63.18 78.8853 63.18C77.9253 63.18 77.0453 62.94 76.2453 62.46C75.4586 61.9667 74.832 61.2867 74.3653 60.42C73.912 59.54 73.6853 58.5467 73.6853 57.44ZM82.7053 57.48C82.7053 56.72 82.5453 56.06 82.2253 55.5C81.9186 54.94 81.512 54.5133 81.0053 54.22C80.4986 53.9267 79.952 53.78 79.3653 53.78C78.7786 53.78 78.232 53.9267 77.7253 54.22C77.2186 54.5 76.8053 54.92 76.4853 55.48C76.1786 56.0267 76.0253 56.68 76.0253 57.44C76.0253 58.2 76.1786 58.8667 76.4853 59.44C76.8053 60.0133 77.2186 60.4533 77.7253 60.76C78.2453 61.0533 78.792 61.2 79.3653 61.2C79.952 61.2 80.4986 61.0533 81.0053 60.76C81.512 60.4667 81.9186 60.04 82.2253 59.48C82.5453 58.9067 82.7053 58.24 82.7053 57.48ZM101.34 51.8C102.207 51.8 102.98 51.98 103.66 52.34C104.353 52.7 104.893 53.2333 105.28 53.94C105.68 54.6467 105.88 55.5 105.88 56.5V63H103.62V56.84C103.62 55.8533 103.373 55.1 102.88 54.58C102.387 54.0467 101.713 53.78 100.86 53.78C100.007 53.78 99.3267 54.0467 98.82 54.58C98.3267 55.1 98.08 55.8533 98.08 56.84V63H95.82V56.84C95.82 55.8533 95.5733 55.1 95.08 54.58C94.5867 54.0467 93.9133 53.78 93.06 53.78C92.2067 53.78 91.5267 54.0467 91.02 54.58C90.5267 55.1 90.28 55.8533 90.28 56.84V63H88V51.98H90.28V53.24C90.6533 52.7867 91.1267 52.4333 91.7 52.18C92.2733 51.9267 92.8867 51.8 93.54 51.8C94.42 51.8 95.2067 51.9867 95.9 52.36C96.5933 52.7333 97.1267 53.2733 97.5 53.98C97.8333 53.3133 98.3533 52.7867 99.06 52.4C99.7667 52 100.527 51.8 101.34 51.8ZM109.941 50.52C109.528 50.52 109.181 50.38 108.901 50.1C108.621 49.82 108.481 49.4733 108.481 49.06C108.481 48.6467 108.621 48.3 108.901 48.02C109.181 47.74 109.528 47.6 109.941 47.6C110.341 47.6 110.681 47.74 110.961 48.02C111.241 48.3 111.381 48.6467 111.381 49.06C111.381 49.4733 111.241 49.82 110.961 50.1C110.681 50.38 110.341 50.52 109.941 50.52ZM111.061 51.98V63H108.781V51.98H111.061ZM119.615 51.8C120.481 51.8 121.255 51.98 121.935 52.34C122.628 52.7 123.168 53.2333 123.555 53.94C123.941 54.6467 124.135 55.5 124.135 56.5V63H121.875V56.84C121.875 55.8533 121.628 55.1 121.135 54.58C120.641 54.0467 119.968 53.78 119.115 53.78C118.261 53.78 117.581 54.0467 117.075 54.58C116.581 55.1 116.335 55.8533 116.335 56.84V63H114.055V51.98H116.335V53.24C116.708 52.7867 117.181 52.4333 117.755 52.18C118.341 51.9267 118.961 51.8 119.615 51.8Z" fill="#747474"/>
              <path d="M10.7106 23.0058C11.9106 23.0058 13.0773 23.2308 14.2106 23.6808C15.3439 24.1308 16.3606 24.7725 17.2606 25.6058L37.0106 44.5058H37.9106C38.7606 44.5058 39.4731 44.2183 40.0481 43.6433C40.6231 43.0683 40.9106 42.3558 40.9106 41.5058C40.9106 41.1325 40.8752 40.7358 40.8043 40.3158C40.7335 39.8958 40.4856 39.4758 40.0606 39.0558L31.0606 30.0558L27.2606 18.7058L22.6606 19.8558C21.6939 20.0891 20.8273 19.9141 20.0606 19.3308C19.2939 18.7475 18.9106 17.9558 18.9106 16.9558V12.1058L16.2106 10.7558L7.46059 22.5058C7.39392 22.5725 7.33559 22.6475 7.28559 22.7308C7.23559 22.8141 7.17725 22.9058 7.11059 23.0058H10.7106ZM10.7106 26.0058H6.81059C6.91059 26.3725 7.06059 26.7087 7.26059 27.0146C7.46059 27.3205 7.69392 27.6009 7.96059 27.8558L24.8606 43.2058C25.3273 43.6391 25.8439 43.9641 26.4106 44.1808C26.9773 44.3975 27.5773 44.5058 28.2106 44.5058H32.6606L15.2106 27.8058C14.6106 27.2391 13.9197 26.7975 13.1378 26.4808C12.356 26.1641 11.547 26.0058 10.7106 26.0058ZM28.2106 47.5058C27.2106 47.5058 26.2606 47.3225 25.3606 46.9558C24.4606 46.5891 23.6273 46.0725 22.8606 45.4058L6.61059 30.6558C5.07726 29.2558 4.21892 27.5391 4.03559 25.5058C3.85225 23.4725 4.37725 21.6225 5.61059 19.9558L13.3106 9.65581C13.8773 8.88915 14.6356 8.38081 15.5856 8.13081C16.5356 7.88081 17.4439 7.98915 18.3106 8.45581L19.7106 9.15581C20.4106 9.52248 20.9523 10.0225 21.3356 10.6558C21.7189 11.2891 21.9106 11.9891 21.9106 12.7558V16.9558L25.6106 16.0058C26.6106 15.7391 27.5773 15.8641 28.5106 16.3808C29.4439 16.8975 30.0773 17.6391 30.4106 18.6058L33.6606 28.4058L42.1606 36.9058C42.8273 37.5725 43.2856 38.2891 43.5356 39.0558C43.7856 39.8225 43.9106 40.6391 43.9106 41.5058C43.9106 43.1725 43.3273 44.5891 42.1606 45.7558C40.9939 46.9225 39.5773 47.5058 37.9106 47.5058H28.2106Z" fill="black"/>
            </svg>
          </div>
          <div className='flex flex-col gap-4'>
            <div className='flex flex-col gap-2'>
              <label className='font-medium' htmlFor="email">Email</label>
              <input
                placeholder='email@example.com'
                className='bg-light-gray p-3 rounded-2xl'
                id='email'
                type='email'
                value={email}
                onChange={handleChangeEmail}
              />
            </div>
            <div className='flex flex-col gap-2'>
              <label className='font-medium' htmlFor="password">Password</label>
              <input
                placeholder='Your Password'
                className='bg-light-gray p-3 rounded-2xl'
                id='password'
                type='password'
                value={password}
                onChange={handleChangePassword}
              />
            </div>
            <div className='flex justify-end'>
              <Link className='underline' href={"/"}>
                Forgot Password?
              </Link>
            </div>
          </div>
          <div className='flex'>
            <button className='bg-blue-700 w-full hover:bg-blue-800 transition text-white rounded-2xl py-3'>
              Login
            </button>
          </div>
        </form> 
      </div>
      <button onClick={teste}>teste</button>
      <button onClick={logout}>logout</button>
    </div>
  )
}

export default Login